npm install -g @nestjs/cli     // install nest js global on your computer
nest --version              // to know the version of nest runing on ur computer
nest --help
nest new task-management        //create a new application
cd task-management          // move into the new created directory
npm run start:dev       // to run the new application
npm install -g cross-env    //Environment variable

https://www.passwordsgenerators.net/  => for password generator


To start a new/fresh project
    - Delete the following default files
        - app.controller.spec.ts
        - app.controller.ts
        - app.service.ts
To generate a module
    - nest g module task
To generate a service
    - nest g service task --no-spec
To generate a controller
    - nest g controller task --no-spec

DATABASE - PG-ADMIN
    - npm i typeorm @nestjs/typeorm pg
    - npm i @nestjs/jwt @nestjs/passport passport passport-jwt
    - npm i @types/passport-jwt --save-dev
    - npm i @nestjs/config OR yarn add @nestjs/config

Runing PosgreSQL via DOCKER
    Install docker on your machine
    After that, run this on your terminal
        - docker
        - docker run --name postgres-nest -p 5432:5432 -e POSTGRES_PASSWORD=postgres -d postgres-task    // -d means it will run in detach mode, postgres after -d is the container name
        - docker container ls
        - docker container stop postgres-nest   // to stop the ru container
        - docker container rm postgres-nest     // to remove a container
        - 

GRAPHQL AND MONGO-DB PROJECT
nest new graphql-mongo        
cd graphql-mongo 
npm run start:dev OR yarn start:dev
To start a new/fresh project
    - Delete the following default files
        - app.controller.spec.ts
        - app.controller.ts
        - app.service.ts
    - npm install graphql graphql-tools apollo-server-express @nestjs/graphql
    - npm install typeorm @nestjs/typeorm mongodb @types/mongodb
    - npm install uuid
To generate a module
    - nest g module lesson
    - create a lesson type as a file 
    - create a resolver file for lesson
    - npm run start:dev
    - Goto localhost:3000/graphql on your browser

To generate a service
    - nest g service lesson --no-spec
To generate a controller
    - nest g controller lesson --no-spec

DOCKER WITH NEST JS USING ORM PRISMA
    - docker ps
    - docker --version
    - create docker-compose.yml file in ur project
    - paste the followingcode inside
        version: '3.8'
        services:
            dev-db:
                image: postgres:13
                ports:
                    - 5434:5432
                environment:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: 123
                    POSTGRES_DB: nest-api
                networks:
                    - freecodecamp
        networks:
            freecodecamp:


    - Goto terminal, run this command
        - docker compose up dev-db -d
        - docker ps
        - docker compose rm --help
        
    - install prisma cli using this command
        - npm i prisma --save-dev
        - npm i @prisma/client --save
        - Run prisma on terminal to general schema file and .env file using
            - npx prisma init
            - add ur model to schema.prisma
            - add ur db connection from docker.compose.yml to .env file to generate migration
            - npx prisma migrate dev
            - npx prisma studio     // to view db on browser
        - nest g module prisma
        - nest g service prisma --no-spec
        - make prisma module Global so that it can be access by every other services
        - npm i --save class-validator class-transformer
        - npm i --save argon2       // to hash password
        
